#### Using Julia on the new HPC #### 
From the terminal enter
    module load julia/1.6.4
Now you should be able to enter 
    julia
and obtain the usual julia interface in the terminal

Now, install all the libraries you need
    Pkg.status()
    Pkg.add("StatsBase")
You can check whether this worked with 
    using StatsBase 
and see whether it gives an error

##### Folders & Overall Structure #####
Most things are similar to what we had before, but you cannot just copy what you had in the previous cluster here. 
You should be ok by uploading everything that is in this folder. 
Note: My setup could differ from yours in terms of folder/file names. You can find below a description of what I have. 
My setting is the following:
- the main folder is called "Graphon"
- inside the folder I have:
    a) the julia script called Integrate_Periodic_Potential.jl 
    b) the submission file submission.sh
    c) a file with the parameters called parameters.csv
    d) a directory called trash
    e) a directory called data with subdirectories data1, data2, ..., data32

A few things to keep in mind:
##### Change in the jl script ######
Of course, HPC had a Julia version that was different from what we used to use, so I have had to change a few functions to make it work.
This is why you should use the new jl script! 

##### Change in submission file ######
The way we submit jobs on the HPC is somewhat different.
I have added the new submission.sh file in this directory. You can just have a look at it! 

##### How to submit the job ####
It is exactly the same!
    for i in {1..10}
    do
    qsub -v "index=$i" -e trash -o trash submission.sh
    done

###### Info on how to run the Power Law Graph simulations ######
I have extended the code to include power law networks. In order to use it, one has to specify:
- \alpha: the exponent of the graphon W(x,y) = (xy)^(-\alpha)
- \beta : the exponent of the renormalisation factor for a non-trivial mean field limit 
The exponents need to satisy 
       0  < \alpha < \beta < 1/2
I have followed the algorithm and conventions of the following paper to create the network and simulate the N-particle system
" The Kuramoto Model on Power Law Graphs: Synchronization and Contrast States", Journal of Nonlinear Science (2020) 30:2405–2427 
https://doi.org/10.1007/s00332-018-9489-3

The only two changes to the main(...) function are:
a)  define the variables \alpha and \beta 
b)  use the correct create_network_power_law(parameters,α,β) function
Please note that, contrary to the previous versions, the functions that create a network have now a new signature
    A , factor = create_network_ANYTYPE()
where the new variable factor is the renormalisation factor for integrating the system. 
For dense graphs (ER, small world, ...) one can set factor == 1. 
For the power law graph, factor = N^(-\beta) and it goes to zero in the thermodynamic limit.



